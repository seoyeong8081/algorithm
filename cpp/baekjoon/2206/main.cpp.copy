#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <limits.h>
using namespace std;

int N, M;
vector<vector<char>> map;
bool **isVisited;
int ans = INT_MAX;

void dfs(int r, int c, bool oneCount, int cnt);

int main(int argc, char const *argv[])
{
    cin >> N >> M;
    // vector<vector<char>> map(N);
    isVisited = new bool *[N];
    string input;
    for (int i = 0; i < N; i++)
    {
        isVisited[i] = new bool[M];

        cin >> input;
        vector<char> row;
        for (int j = 0; j < M; j++)
        {
            isVisited[i][j] = false;

            row.push_back(input[j]);
        }
        map.push_back(row);
    }

    dfs(0, 0, false, 1);

    if (ans == INT_MAX)
    {
        cout << -1 << "\n";
    }
    else
    {
        cout << ans << "\n";
    }

    return 0;
}

int dr[4] = {-1, 1, 0, 0};
int dc[4] = {0, 0, -1, 1};

void dfs(int r, int c, bool oneCount, int cnt)
{
    if (r == N - 1 && c == M - 1)
    {
        // cout << "HELLO" << endl; // test
        if (cnt < ans)
            ans = cnt;
        return;
    }

    isVisited[r][c] = true;
    // cout << r << " " << c << endl; // test
    // for (int i = 0; i < N; i++)
    // {
    //     for (int j = 0; j < M; j++)
    //     {
    //         cout << isVisited[i][j] << " ";
    //     }
    //     cout << endl;
    // }

    for (int i = 0; i < 4; i++)
    {
        int nr = r + dr[i];
        int nc = c + dc[i];
        if (nr >= 0 && nr < N && nc >= 0 && nc < M && !isVisited[nr][nc])
        {
            // cout << "next: " << nr << " " << nc << endl; // test
            if (map[nr][nc] == '0')
            {
                dfs(nr, nc, oneCount, cnt + 1);
            }
            else if (map[nr][nc] == '1' && !oneCount)
            {
                dfs(nr, nc, true, cnt + 1);
            }
        }
    }
    isVisited[r][c] = false;
}